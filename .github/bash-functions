#!/bin/bash -e

V_MINOR=1
V_PATCH=2

TAG_PREFIX=v
REMOTE=origin

DEB_PACKAGE=package

getVersion() {
  cat version
}

setVersion() {
  local version=$1
  echo $version > version
}

nextVersion() {
  local version=$1
  local index=$2
  local IFS=.
  local nums=($version)
  local len=${#nums[@]}
  (( nums[index]++ ))
  while (( ++index < len )); do
    (( nums[index] = 0 ))
  done
  echo "${nums[*]}"
}

existTag() {
  local version=$1
  git ls-remote --exit-code --tags $REMOTE "${TAG_PREFIX}${version}"
}

listTags() {
  git ls-remote --tags $REMOTE "${TAG_PREFIX}*" \
    | awk '{print $2}' \
    | sed 's/^refs\/tags\///'
}

catAdd() {
  cat -
  echo $1
}

prevTag() {
  local version=$1
  local tag="${TAG_PREFIX}${version}"
  listTags \
    | catAdd "$tag" \
    | sort -Vur \
    | grep -m 1 -A 1 -xF "$tag" \
    | tail -n +2
}

changelogEntry() {
  local version=$1
  echo "${DEB_PACKAGE} (${version}) unstable; urgency=medium"
  echo
  sed 's/^/  * /'
  echo
  echo " -- ${DEBFULLNAME} <${DEBEMAIL}>  $(date -R)"
  echo
}

updateVersion() {
  local index=$1
  local version=$(getVersion)
  if existTag $version; then
    echo "Increasing version at position ${index}"
    version=$(nextVersion $version $index)
    echo "Setting project version: ${version}"
    setVersion $version
    git add version
  else
    echo "Using project version: ${version}"
  fi
}

updateChangelog() {
  local version=$(getVersion)
  local prevTag=$(prevTag $version)
  local head=$(git log -1 --format=%H)
  echo "Fetching commits from ${prevTag} to ${head}"
  git fetch --progress --shallow-exclude=$prevTag $REMOTE $head:changelog
  git log --format=tformat:"(%an) %s" changelog \
    | changelogEntry $version \
    | cat - debian/changelog > debian/changelog.new
  mv debian/changelog.new debian/changelog
  git add debian/changelog
}

createTag() {
  local version=$(getVersion)
  git commit -m "Version: ${version}" || true
  git tag "${TAG_PREFIX}${version}"
  git push --tags
  git push
}

setDebIdentity() {
  export DEBFULLNAME="Fra Goi"
  export DEBEMAIL="fragoidev@gmail.com"
}

setGitIdentity() {
  git config user.name frabot
  git config user.email fragoidev@gmail.com
}

createRelease() {
  updateVersion $V_PATCH

  setDebIdentity
  updateChangelog

  setGitIdentity
  createTag
}

resolveVersionConflict() {
  local vv=$(git ls-files -u version | wc -l)
  if [ "$vv" = "3" ]; then
    echo "Restore version file from HEAD"
    git restore --ours version
    git add version
    sed 's/\t/  /g' .git/MERGE_MSG \
      | git commit -F -
  else
    git merge --abort
    return 1
  fi
}

updateBranch() {
  local other=$1
  local current=$(git branch --show-current)

  echo "Merging branch ${current} with ${other}"

  ## Fetch minimal history from both branches
  # git fetch --progress --shallow-exclude=$other $REMOTE $current || true
  # git fetch --progress --shallow-exclude=$current $REMOTE $other || true
  # git fetch --progress --deepen=1 $REMOTE $current || true

  git pull --progress --ff $REMOTE $other || resolveVersionConflict
}

updateDev() {
  local other=$1

  setGitIdentity
  updateBranch $other

  updateVersion $V_MINOR

  local version=$(getVersion)
  git commit -m "Next development version: ${version}" || true
  git push
}

# updateDev() {
#   local version=$(getVersion)

#   if ! existTag $version; then
#     echo "Nothing to do"
#     return
#   fi

#   echo "Merging release: ${version}"
#   git pull --progress --ff $REMOTE "${TAG_PREFIX}${version}" || true

#   version=$(nextVersion $version $V_MINOR)
#   echo "Setting project version: ${version}"
#   setVersion $version

#   setGitIdentity
#   git commit -am "Next version: ${version}"
#   git push
# }
