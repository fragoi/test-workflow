#!/bin/bash -e

V_MINOR=1
V_PATCH=2

TAG_PREFIX=v
REMOTE=origin

DEB_PACKAGE=test-workflows

getVersion() {
  cat version
}

setVersion() {
  local version=$1
  echo $version > version
}

nextVersion() {
  local version=$1
  local index=$2
  local IFS=.
  local nums=($version)
  local len=${#nums[@]}
  (( nums[index]++ ))
  while (( ++index < len )); do
    (( nums[index] = 0 ))
  done
  echo "${nums[*]}"
}

existTag() {
  local version=$1
  git ls-remote --exit-code --tags $REMOTE "${TAG_PREFIX}${version}"
}

listTags() {
  git ls-remote --tags $REMOTE "${TAG_PREFIX}*" \
    | awk '{print $2}' \
    | sed 's/^refs\/tags\///'
}

catAdd() {
  cat -
  echo $1
}

prevTag() {
  local version=$1
  local tag="${TAG_PREFIX}${version}"
  listTags \
    | catAdd "$tag" \
    | sort -Vur \
    | grep -m 1 -A 1 -xF "$tag" \
    | tail -n +2
}

changelogEntry() {
  local version=$1
  echo "${DEB_PACKAGE} (${version}) unstable; urgency=medium"
  echo
  sed 's/^/  * /'
  echo
  echo " -- ${DEBFULLNAME} <${DEBEMAIL}>  $(date -R)"
  echo
}

updateVersion() {
  local version=$(getVersion)
  if existTag $version; then
    echo "Increasing patch version"
    version=$(nextVersion $version $V_PATCH)
    echo "Setting project version: ${version}"
    setVersion $version
  else
    echo "Using project version: ${version}"
  fi
}

updateChangelog() {
  local version=$(getVersion)
  local prevTag=$(prevTag $version)
  local head=$(git log -1 --format=%H)
  echo "Fetching commits from ${prevTag} to ${head}"
  git fetch --progress --shallow-exclude=$prevTag $REMOTE $head:changelog
  git log --format=tformat:"(%an) %s" changelog \
    | changelogEntry $version \
    | cat - debian/changelog > debian/changelog.new
  mv debian/changelog.new debian/changelog
}

createTag() {
  local version=$(getVersion)
  git commit -am "Version: ${version}" || true
  git tag "${TAG_PREFIX}${version}"
  git push --tags
  git push
}

setDebIdentity() {
  export DEBFULLNAME="Fra Goi"
  export DEBEMAIL="fragoidev@gmail.com"
}

setGitIdentity() {
  git config user.name frabot
  git config user.email fragoidev@gmail.com
}

createRelease() {
  updateVersion

  setDebIdentity
  updateChangelog

  setGitIdentity
  createTag
}

updateDev() {
  local branch=$1
  local version=$(getVersion)

  setGitIdentity

  echo "Merging branch: ${branch}"
  if ! git pull --ff $REMOTE $branch; then
    local vv=$(git ls-files -u version | wc -l)
    if [ "$vv" = "3" ]; then
      echo "Version file conflict detected"
      setVersion $version
      git add version
      git merge --continue
    else
      echo "Merge failed"
      return 1
    fi
  fi

  if existTag $version; then
    echo "Increasing minor version"
    version=$(nextVersion $version $V_MINOR)
    echo "Setting project version: ${version}"
    setVersion $version

    git commit -am "Next development version: ${version}"
  fi

  git push
}
