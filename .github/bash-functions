#!/bin/bash -e

TAG_PREFIX=v
DEV_BRANCH=dev

getVersion() {
  cat version
}

setVersion() {
  local version=$1
  echo $version > version
}

nextVersion() {
  local version=$1
  local index=$2
  local IFS=.
  local nums=($version)
  local len=${#nums[@]}
  (( nums[index]++ ))
  while (( ++index < len )); do
    (( nums[index] = 0 ))
  done
  echo "${nums[*]}"
}

hasTag() {
  local version=$1
  git log -1 --format=oneline "${TAG_PREFIX}${version}" --
}

lastTag() {
  git log -1 --tags="${TAG_PREFIX}*" --format=tformat:%D \
    | sed "s/, /\n/g" \
    | grep "tag: ${TAG_PREFIX}" \
    | awk '{print $2}' \
    | sort -V
}

hasBranch() {
  local branch=$1
  git log -1 --format=tformat:%D \
    | sed "s/, /\n/g" \
    | grep -qE "\b${branch}\b"
}

isDevMerge() {
  hasBranch $DEV_BRANCH
}

nextVersionIndex() {
  isDevMerge && echo 1 || echo 2
}

installDevscripts() {
  sudo apt update && sudo apt install devscripts
}

setDebIdentity() {
  export DEBFULLNAME="Fra Goi"
  export DEBEMAIL="fragoidev@gmail.com"
}

linesToChangeLog() {
  local version=$1
  while read -r line; do
    dch -v $version "$line"
  done
}

updateChangelog() {
  local version=$1
  git log --format=tformat:"(%an) %s" $(lastTag)..HEAD \
    | linesToChangeLog $version
}

setGitIdentity() {
  git config user.name frabot
  git config user.email fragoidev@gmail.com
}

newRelease() {
  local version=$(getVersion)

  git fetch --tags --quiet

  if hasTag $version; then
    echo "Creating new version"
    local index=$(nextVersionIndex)
    version=$(nextVersion $version $index)
    setVersion $version
  else
    echo "Using project version"
  fi

  installDevscripts
  setDebIdentity
  updateChangelog $version

  setGitIdentity
  git commit -am "Version: ${version}" || true
  git tag "${TAG_PREFIX}${version}"
  git push --tags
  git push
}

merge() {
  local branch=$1
  setGitIdentity
  git fetch --all --quiet
  git branch -avv
  git merge $branch
  git push
}
